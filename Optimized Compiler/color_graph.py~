

# flatExprs: a list of flat expressions
# return: a map from variables to stack locations
def mapVar(coloring, uncolored, num_vars):
	num_vars = num_vars + 1
	for var in uncolored:
		coloring[var] = "-" + str(num_vars*4) + "(%ebp)"
		num_vars = num_vars + 1
	return coloring


def preprocessor(rig, spilled_assignment):
	coloring = {"%esp" :  "%esp", "%ebp" : "%ebp", "%eax" : "%eax", "%ebx" : "%ebx", "%ecx" : "%ecx", "%edx" : "%edx", "%esi" : "%esi", "%edi" : "%edi"}
	if spilled_assignment == None:
		return coloring
	else:
		for assignment in spilled_assignment:
			coloring[assignment] = spilled_assignment[assignment]
			del rig[assignment]
		return coloring

def color_graph(rig, spilled_assignment):
	#set of colors: use registers as colors
	colors = set(["%eax", "%ebx", "%ecx", "%edx", "%esi", "%edi"])
	#dictionary of current assignments: the six registers are preassigned
	#coloring = {"%esp" :  "%esp", "%ebp" : "%ebp", "%eax" : "%eax", "%ebx" : "%ebx", "%ecx" : "%ecx", "%edx" : "%edx", "%esi" : "%esi", "%edi" : "%edi"}
	coloring = preprocessor(rig, spilled_assignment)
	spilled = []
	spill_map = {}
	numVar = len(rig.keys())

	def saturation(node, conflicts):
		current_colors = set()
		for var in conflicts:
			if var in coloring.keys():
				current_colors.add(coloring[var])
		return (len(current_colors), current_colors)

	def get_highest_saturated(rig):
		max_sat = [0, '', None]
		for node in rig.keys():
			if node not in colors:
				node_sat, colors_used = saturation(node, rig[node])
				#print
				#print node_sat
				#print colors_used
				#print
				if node_sat > max_sat[0]:
					max_sat = [node_sat, node, colors_used]
				elif node_sat == max_sat[0]:
					print max_sat
					if max_sat[1][:12] != "unspillable$":
						max_sat = [node_sat, node, colors_used]
					#elif max_sat[1][:5] != "temp$":
					#	max_sat = [node_sat, node, colors_used]
		return (max_sat[1], max_sat[2])

	while (len(rig.keys()) > len(colors)):
		node, colors_used = get_highest_saturated(rig)
		color = (colors - colors_used)
		#print color
		#print
		if len(color) > 0:
			coloring[node] = color.pop()
		else:
			#print
			#print "color assigned none"
			#print node
			#print
			#coloring[node] = None
			spilled.append(node)
		del rig[node]

	#print
	#print len(coloring.keys()) - 8
	#print numVar
	num_vars = 0
	if (spilled_assignment != None):
		num_vars = len(spilled_assignment)
	coloring = mapVar(coloring, spilled, num_vars)
	#print
	#print coloring
	#print
	for spill in spilled:
		spill_map[spill] = coloring[spill]
	return (coloring, spill_map)

#graph = {'temp$1': set(["%eax"]), 'x': set(["%eax", 'y']), 'y' : set(["%ecx", 'x', 'w']), 'w' : set(['y']), 'm' : set([])}
#print
#print graph
#print
#print color_graph(graph)

